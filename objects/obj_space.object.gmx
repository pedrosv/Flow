<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_empty</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>next_path = noone; //pointer to the next path in grid if has
last_path = noone; //pointer to the previous path, if has

is_clicked = false;
image_speed = 0;

//set colour
colour = 0;

// type can be empty, line or dot
type = "empty";

//position on grid
index_x = 0;
index_y = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set sprites

var has_next = (next_path != noone); //know if has a next
var has_last = (last_path != noone); //know if has a last

//empty
if(self.type == "empty"){
    sprite_index = spr_empty;
    colour = 0;
    //set colour
    set_colour(self.id);
}

//dot
else if(self.type == "dot"){
    sprite_index = spr_dot;
    
    //dot with path
    if(has_next){
        image_index = 1;
        image_angle = point_direction(self.x,self.y, next_path.x, next_path.y);
    }
    //dot with path
    else if(has_last){
        image_index = 1;
        image_angle = point_direction(self.x,self.y, last_path.x, last_path.y);
    }
    
    //dot without path
    else{
        image_index = 0;
    }
}

//line
else if(self.type == "line"){
    sprite_index = spr_line;
    set_line_sprite(self.id);
    
    //set colour
    set_colour(self.id);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();
debug = "ID: " + string(self.id) + "  Type: " + type + "  Colour: "+ string(colour) +"  next: " + string(next_path) + "  last: " + string(last_path);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(self.type != "empty"){

    if(self.next_path != noone){
        destroy_path(self.next_path.id);
    }
    
    
    
    if(self.type == "dot" and self.last_path != noone){
        destroy_path(self.id)
    }

    //set last clicked to self
    global.last_clicked = self.id;
    self.is_clicked = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//only start if was clicked on a space before
if(global.last_clicked != noone) and (self.is_clicked == false){

    //this if dont allowed the player continue a path after arrive in a dot
    if!(global.last_clicked.type == "dot" and global.last_clicked.last_path != noone){
    
        //they need be neighbours to do some action
        if(are_neighbour(self.id, global.last_clicked)){
            
            if(self.type == "dot"){
                //check color
                if(global.last_clicked.colour == self.colour){
                    if(self.next_path != noone){
                        destroy_path(self.next_path.id);
                    }
                    set_click(self.id);
                }
            }
            
            else if(self.type == "empty"){
                //change to line space
                self.type = "line";
                set_click(self.id);
            } 
            
            else if(self.type == "line"){
                
                last_path.next_path = noone;
                if(next_path != noone){
                    destroy_path(self.next_path.id);
                }
                set_click(self.id);
            }       
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
