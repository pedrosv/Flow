<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_line</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//set colour
if (self.last_path != noone){
    self.colour = self.last_path.colour;
}
var has_next = (next_path != noone); //know if has a next
var direction_last = point_direction(x, y, last_path.x, last_path.y) //direction of last


//set sprite
if(next_path == noone){
    image_angle  = direction_last;
}

else{
    var direction_next = point_direction(x, y, next_path.x, next_path.y)
    
    //sprite now is a complete line
    if(direction_last - direction_next == 180 or direction_last - direction_next == -180){
        image_index = 1;
        image_angle = direction_last;
    }
    
    //sprite is a "L"
    else{
        image_index = 2;
        // "L" up
        if(last_path.index_y &lt; self.index_y or next_path.index_y &lt; self.index_y){
        
            //show_message("last Y: "+ string(last_path.index_y) + "#next Y: "+ string(next_path.index_y));
            
            // "L" left
            if(last_path.index_x &lt; self.index_x) or (next_path.index_x &lt; self.index_x){
                image_angle = 90;
            }
            
            //"L" right
            else{
                image_angle = 0;
            }
        }
        
        // "L" down
        else{
            
            //show_message("last Y: "+ string(last_path.index_y) + "#next Y: "+ string(next_path.index_y));
        
            // "L" left
            if(last_path.index_x &lt; self.index_x) or (next_path.index_x &lt; self.index_x){
                image_angle = 180;   
            }
            
            //"L" right
            else{
                image_angle = 270;
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>destroy_path(self.id);

//set last clicked to self
global.last_clicked = self.id;
self.is_clicked = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//only start if was clicked on a space before
if(global.last_clicked != noone) and (self.is_clicked == false){
    
    //they need be neighbours to do some action
    if(are_neighbour(self, global.last_clicked)){
    
        if(next_path != noone){
            destroy_path(self.id);
        }

        //set the button which was clicked
        self.is_clicked = true;
        global.last_clicked.is_clicked = false;
        
        //set pointers
        self.last_path = global.last_clicked; 
        global.last_clicked.next_path = self.id;
        
        //in the end, set last clicked to the new line
        global.last_clicked = self.id;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
