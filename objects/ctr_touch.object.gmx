<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_ide_controller</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>9999999</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not modify
current_touch = 0;
max_touches = 1+(global.USE_MULTITOUCH*3);
alarm[0] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do not modify

//Touch control for touch devices
if (global.DEVICE_IS_TOUCH)
{
    var touches=0;

    //Loop through all the touches, calling events
    for (current_touch=0; current_touch &lt; max_touches; current_touch++)
    {
        if (device_mouse_check_button_pressed(current_touch,mb_left))   {
            with(instance_create(device_mouse_x(current_touch),device_mouse_y(current_touch),jce_obj_touch_event))
                touch_number = other.current_touch;
        }
        else
        if (device_mouse_check_button(current_touch,mb_left))
            touches++;
        else
        if (device_mouse_check_button_released(current_touch,mb_left))  {
            with(jce_obj_touch_event){
                if (touch_number = other.current_touch){
                    event_user(ButtonReleased);
                    instance_destroy();
                }
            }
        }
        else{
            with(jce_obj_touch_event){
                if (touch_number = other.current_touch){
                    instance_destroy();
                }
            }
        }

        //Enter and leave    
        with(jce_obj_touch_event){
            if (touch_number == other.current_touch){
                with(par_button)if (pressed_by == other.touch_number){
                    if !(position_meeting(other.x,other.y,self)){
                        if (is_over){event_user(ButtonLeave);is_over=0;}
                    }
                    else{
                        if !(is_over){
                            event_user(ButtonEnter);
                            is_over=1;
                        }
                    }  
                }
            }
        }
    }
}
else
//Click control for mouse devices
{
    if (mouse_check_button_pressed(mb_left)){
        with(par_button){
            if (position_meeting(mouse_x,mouse_y,self)) and (is_active){
                pressed_by = 1;
                event_user(ButtonPressed);
            }
        }
    }
    else
    if (mouse_check_button(mb_left)){
         with(par_button){
            if (position_meeting(mouse_x,mouse_y,self)) and (is_active){
                if (pressed_by!=-1)event_user(ButtonIsDown);
            }
         }
    }
    else
    if (mouse_check_button_released(mb_left))  {
        //pressed_by = -1;
        with(par_button){
            if (position_meeting(mouse_x,mouse_y,self)) and (is_active){
                event_user(ButtonReleased);
            }          
        }
    }
    
    with(par_button)
    {
        if (is_active){
            //Enter event
            if (position_meeting(mouse_x,mouse_y,self)){
                if !(is_over){event_user(ButtonEnter);is_over = 1;}
            }
            else
            //Leave event
            if (is_over){
                event_user(ButtonLeave);
                is_over=0;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
